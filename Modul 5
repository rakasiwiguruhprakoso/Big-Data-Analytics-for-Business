READING FILE Python

import urllib.request
url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%204/data/example1.txt'
filename = 'Example1.txt'
urllib.request.urlretrieve(url, filename)
('Example1.txt', <http.client.HTTPMessage at 0x7fd9b4229410>)
!wget -O /resources/data/Example1.txt https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%204/data/example1.txt
/resources/data/Example1.txt: No such file or directory
# Read the Example1.txt

example1 = "Example1.txt"
file1 = open(example1, "r")
file1.name
'Example1.txt'
# Print the mode of file, either 'r' or 'w'

file1.mode
'r'
# Read the file

FileContent = file1.read()
FileContent
'This is line 1 \nThis is line 2\nThis is line 3'
# Print the file with '\n' as a new line

print(FileContent)
This is line 1 
This is line 2
This is line 3
# Type of file content

type(FileContent)
str
# Close file after finish

file1.close()
with open(example1, "r") as file1:
    FileContent = file1.read()
    print(FileContent)
This is line 1 
This is line 2
This is line 3
# Verify if the file is closed

file1.closed
True
# See the content of file

print(FileContent)
This is line 1 
This is line 2
This is line 3
with open(example1, "r") as file1:
    print(file1.read(4))
This
# Read certain amount of characters

with open(example1, "r") as file1:
    print(file1.read(4))
    print(file1.read(4))
    print(file1.read(7))
    print(file1.read(15))
This
 is 
line 1 

This is line 2
# Read certain amount of characters

with open(example1, "r") as file1:
    print(file1.read(16))
    print(file1.read(5))
    print(file1.read(9))
This is line 1 

This 
is line 2
# Read one line

with open(example1, "r") as file1:
    print("first line: " + file1.readline())
first line: This is line 1 

with open(example1, "r") as file1:
    print(file1.readline(20)) # does not read past the end of line
    print(file1.read(20)) # Returns the next 20 chars
This is line 1 

This is line 2
This 
# Iterate through the lines

with open(example1,"r") as file1:
        i = 0;
        for line in file1:
            print("Iteration", str(i), ": ", line)
            i = i + 1
Iteration 0 :  This is line 1 

Iteration 1 :  This is line 2

Iteration 2 :  This is line 3
with open(example1, "r") as file1:
    FileasList = file1.readlines()
print(FileasList[0])
FileasList[2]
This is line 1 

'This is line 3'
Write and Save Files in Python

# Write line to file
exmp2 = 'Example2.txt'
with open(exmp2, 'w') as writefile:
    writefile.write("This is line A")
# Read file

with open(exmp2, 'r') as testwritefile:
    print(testwritefile.read())
This is line A
# Write lines to file

with open(exmp2, 'w') as writefile:
    writefile.write("This is line A\n")
    writefile.write("This is line B\n")
    writefile.write("Belajar Python yuy")
# Check whether write to file

with open(exmp2, 'r') as testwritefile:
    print(testwritefile.read())
This is line A
This is line B
Belajar Python yuy
# Sample list of text

Lines = ["This is line A\n", "This is line B\n", "This is line C\n"]
Lines
['This is line A\n', 'This is line B\n', 'This is line C\n']
# Write the strings in the list to text file

with open('Example2.txt', 'w') as writefile:
    for line in Lines:
        print(line)
        writefile.write(line)
This is line A

This is line B

This is line C

# Verify if writing to file is successfully executed

with open('Example2.txt', 'r') as testwritefile:
    print(testwritefile.read())
This is line A
This is line B
This is line C

with open('Example2.txt', 'w') as writefile:
    writefile.write("Overwrite\n")
with open('Example2.txt', 'r') as testwritefile:
    print(testwritefile.read())
Overwrite

# Write a new line to text file

with open('Example2.txt', 'a') as testwritefile:
    testwritefile.write("This is line C\n")
    testwritefile.write("This is line D\n")
    testwritefile.write("This is line E\n")
# Verify if the new line is in the text file

with open('Example2.txt', 'r') as testwritefile:
    print(testwritefile.read())
Overwrite
This is line C
This is line D
This is line E

with open('Example2.txt', 'a+') as testwritefile:
    testwritefile.write("This is line E\n")
    print(testwritefile.read())
with open('Example2.txt', 'a+') as testwritefile:
    print("Initial Location: {}".format(testwritefile.tell()))
    
    data = testwritefile.read()
    if (not data):  #empty strings return false in python
            print('Read nothing') 
    else: 
            print(testwritefile.read())
            
    testwritefile.seek(0,0) # move 0 bytes from beginning.
    
    print("\nNew Location : {}".format(testwritefile.tell()))
    data = testwritefile.read()
    if (not data): 
            print('Read nothing') 
    else: 
            print(data)
    
    print("Location after read: {}".format(testwritefile.tell()) )
Initial Location: 70
Read nothing

New Location : 0
Overwrite
This is line C
This is line D
This is line E
This is line E

Location after read: 70
with open('Example2.txt', 'r+') as testwritefile:
    data = testwritefile.readlines()
    testwritefile.seek(0,0) #write at beginning of file
   
    testwritefile.write("Line 1" + "\n")
    testwritefile.write("Line 2" + "\n")
    testwritefile.write("Line 3" + "\n")
    testwritefile.write("finished\n")
    #Uncomment the line below
    #testwritefile.truncate()
    testwritefile.seek(0,0)
    print(testwritefile.read())
Line 1
Line 2
Line 3
finished
is line D
This is line E
This is line E

# Copy file to another

with open('Example2.txt','r') as readfile:
    with open('Example3.txt','w') as writefile:
          for line in readfile:
                writefile.write(line)
# Verify if the copy is successfully executed

with open('Example3.txt','r') as testwritefile:
    print(testwritefile.read())
Line 1
Line 2
Line 3
finished
is line D
This is line E
This is line E

#Run this prior to starting the exercise
from random import randint as rnd

memReg = 'members.txt'
exReg = 'inactive.txt'
fee =('yes','no')

def genFiles(current,old):
    with open(current,'w+') as writefile: 
        writefile.write('Membership No  Date Joined  Active  \n')
        data = "{:^13}  {:<11}  {:<6}\n"

        for rowno in range(20):
            date = str(rnd(2015,2020))+ '-' + str(rnd(1,12))+'-'+str(rnd(1,25))
            writefile.write(data.format(rnd(10000,99999),date,fee[rnd(0,1)]))


    with open(old,'w+') as writefile: 
        writefile.write('Membership No  Date Joined  Active  \n')
        data = "{:^13}  {:<11}  {:<6}\n"
        for rowno in range(3):
            date = str(rnd(2015,2020))+ '-' + str(rnd(1,12))+'-'+str(rnd(1,25))
            writefile.write(data.format(rnd(10000,99999),date,fee[1]))


genFiles(memReg,exReg)
def cleanFiles(currentMem,exMem):
    '''
    currentMem: File containing list of current members
    exMem: File containing list of old members
    
    Removes all rows from currentMem containing 'no' and appends them to exMem
    '''
    
    pass 


# Code to help you see the files
# Leave as is
memReg = 'members.txt'
exReg = 'inactive.txt'
cleanFiles(memReg,exReg)


headers = "Membership No  Date Joined  Active  \n"
with open(memReg,'r') as readFile:
    print("Active Members: \n\n")
    print(readFile.read())
    
with open(exReg,'r') as readFile:
    print("Inactive Members: \n\n")
    print(readFile.read())
Active Members: 


Membership No  Date Joined  Active  
    89714      2015-12-13   no    
    64823      2016-7-6     no    
    49165      2015-12-7    no    
    34349      2020-3-17    yes   
    95292      2016-10-9    yes   
    95907      2015-3-14    yes   
    25825      2018-7-2     yes   
    91500      2018-5-20    no    
    95425      2016-2-19    yes   
    88480      2018-3-22    no    
    58322      2020-7-9     no    
    92955      2018-7-11    yes   
    72677      2017-9-2     no    
    30504      2018-7-22    yes   
    22552      2017-2-15    no    
    49715      2019-11-9    yes   
    37513      2020-10-21   yes   
    75672      2018-8-11    yes   
    15603      2017-7-7     no    
    84052      2018-4-2     no    

Inactive Members: 


Membership No  Date Joined  Active  
    26937      2018-4-19    no    
    73870      2015-4-11    no    
    33518      2020-11-10   no    

#Case
def testMsg(passed):
    if passed:
       return 'Test Passed'
    else :
       return 'Test Failed'

testWrite = "testWrite.txt"
testAppend = "testAppend.txt" 
passed = True

genFiles(testWrite,testAppend)

with open(testWrite,'r') as file:
    ogWrite = file.readlines()

with open(testAppend,'r') as file:
    ogAppend = file.readlines()

try:
    cleanFiles(testWrite,testAppend)
except:
    print('Error')

with open(testWrite,'r') as file:
    clWrite = file.readlines()

with open(testAppend,'r') as file:
    clAppend = file.readlines()
        
# checking if total no of rows is same, including headers

if (len(ogWrite) + len(ogAppend) != len(clWrite) + len(clAppend)):
    print("The number of rows do not add up. Make sure your final files have the same header and format.")
    passed = False
    
for line in clWrite:
    if  'no' in line:
        passed = False
        print("Inactive members in file")
        break
    else:
        if line not in ogWrite:
            print("Data in file does not match original file")
            passed = False
print ("{}".format(testMsg(passed)))
Inactive members in file
Test Failed
#solution
def cleanFiles(currentMem,exMem):
    with open(currentMem,'r+') as writeFile: 
        with open(exMem,'a+') as appendFile:
            #get the data
            writeFile.seek(0)
            members = writeFile.readlines()
            #remove header
            header = members[0]
            members.pop(0)
                
            inactive = [member for member in members if ('no' in member)]
            '''
            The above is the same as 

            for member in members:
            if 'no' in member:
                inactive.append(member)
            '''
            #go to the beginning of the write file
            writeFile.seek(0) 
            writeFile.write(header)
            for member in members:
                if (member in inactive):
                    appendFile.write(member)
                else:
                    writeFile.write(member)      
            writeFile.truncate()
                
memReg = 'members.txt'
exReg = 'inactive.txt'
cleanFiles(memReg,exReg)

# code to help you see the files

headers = "Membership No  Date Joined  Active  \n"

with open(memReg,'r') as readFile:
    print("Active Members: \n\n")
    print(readFile.read())
    
with open(exReg,'r') as readFile:
    print("Inactive Members: \n\n")
    print(readFile.read())
Active Members: 


Membership No  Date Joined  Active  
    34349      2020-3-17    yes   
    95292      2016-10-9    yes   
    95907      2015-3-14    yes   
    25825      2018-7-2     yes   
    95425      2016-2-19    yes   
    92955      2018-7-11    yes   
    30504      2018-7-22    yes   
    49715      2019-11-9    yes   
    37513      2020-10-21   yes   
    75672      2018-8-11    yes   

Inactive Members: 


Membership No  Date Joined  Active  
    26937      2018-4-19    no    
    73870      2015-4-11    no    
    33518      2020-11-10   no    
    89714      2015-12-13   no    
    64823      2016-7-6     no    
    49165      2015-12-7    no    
    91500      2018-5-20    no    
    88480      2018-3-22    no    
    58322      2020-7-9     no    
    72677      2017-9-2     no    
    22552      2017-2-15    no    
    15603      2017-7-7     no    
    84052      2018-4-2     no    

Operate a Speech to Text Translator through an API

#you will need the following library 
!pip install ibm_watson wget
Collecting ibm_watson
  Downloading ibm-watson-5.3.0.tar.gz (412 kB)
     |████████████████████████████████| 412 kB 28.1 MB/s 
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
    Preparing wheel metadata ... done
Collecting wget
  Downloading wget-3.2.zip (10 kB)
Requirement already satisfied: requests<3.0,>=2.0 in /usr/local/lib/python3.7/dist-packages (from ibm_watson) (2.23.0)
Collecting websocket-client==1.1.0
  Downloading websocket_client-1.1.0-py2.py3-none-any.whl (68 kB)
     |████████████████████████████████| 68 kB 6.4 MB/s 
Collecting ibm-cloud-sdk-core==3.*,>=3.3.6
  Downloading ibm-cloud-sdk-core-3.13.2.tar.gz (49 kB)
     |████████████████████████████████| 49 kB 5.8 MB/s 
Requirement already satisfied: python-dateutil>=2.5.3 in /usr/local/lib/python3.7/dist-packages (from ibm_watson) (2.8.2)
Collecting requests<3.0,>=2.0
  Downloading requests-2.26.0-py2.py3-none-any.whl (62 kB)
     |████████████████████████████████| 62 kB 916 kB/s 
Collecting urllib3<2.0.0,>=1.26.0
  Downloading urllib3-1.26.7-py2.py3-none-any.whl (138 kB)
     |████████████████████████████████| 138 kB 66.4 MB/s 
Collecting PyJWT<3.0.0,>=2.0.1
  Downloading PyJWT-2.3.0-py3-none-any.whl (16 kB)
Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.5.3->ibm_watson) (1.15.0)
Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.7/dist-packages (from requests<3.0,>=2.0->ibm_watson) (2.0.8)
Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0,>=2.0->ibm_watson) (2021.10.8)
Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0,>=2.0->ibm_watson) (2.10)
Building wheels for collected packages: ibm-watson, ibm-cloud-sdk-core, wget
  Building wheel for ibm-watson (PEP 517) ... done
  Created wheel for ibm-watson: filename=ibm_watson-5.3.0-py3-none-any.whl size=408872 sha256=3c71c0a80ea67a68b8c8fa3ae4e56836dccbee03b54ed23fd246e3b63fbc1632
  Stored in directory: /root/.cache/pip/wheels/21/d9/82/4ce5b94730bc4f1f7b4c6384f72964b9b8f79fcc125bb8085c
  Building wheel for ibm-cloud-sdk-core (setup.py) ... done
  Created wheel for ibm-cloud-sdk-core: filename=ibm_cloud_sdk_core-3.13.2-py3-none-any.whl size=83241 sha256=16fb9b3b34efc43df1b329bb3d580250a71c054791b3495dab37294e129472f3
  Stored in directory: /root/.cache/pip/wheels/f0/0d/5c/0c26fcc2db712e8d270e52f7c9f6d8abe33ca79ec29438aa14
  Building wheel for wget (setup.py) ... done
  Created wheel for wget: filename=wget-3.2-py3-none-any.whl size=9672 sha256=fe3c4649f283b9cda90208e0f10986c44d39cea2a348d279e7099682ecf2b061
  Stored in directory: /root/.cache/pip/wheels/a1/b6/7c/0e63e34eb06634181c63adacca38b79ff8f35c37e3c13e3c02
Successfully built ibm-watson ibm-cloud-sdk-core wget
Installing collected packages: urllib3, requests, PyJWT, websocket-client, ibm-cloud-sdk-core, wget, ibm-watson
  Attempting uninstall: urllib3
    Found existing installation: urllib3 1.24.3
    Uninstalling urllib3-1.24.3:
      Successfully uninstalled urllib3-1.24.3
  Attempting uninstall: requests
    Found existing installation: requests 2.23.0
    Uninstalling requests-2.23.0:
      Successfully uninstalled requests-2.23.0
ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
google-colab 1.0.0 requires requests~=2.23.0, but you have requests 2.26.0 which is incompatible.
datascience 0.10.6 requires folium==0.2.1, but you have folium 0.8.3 which is incompatible.
Successfully installed PyJWT-2.3.0 ibm-cloud-sdk-core-3.13.2 ibm-watson-5.3.0 requests-2.26.0 urllib3-1.26.7 websocket-client-1.1.0 wget-3.2
from ibm_watson import SpeechToTextV1 
import json
from ibm_cloud_sdk_core.authenticators import IAMAuthenticator
url_s2t = ""
iam_apikey_s2t = ""
authenticator = IAMAuthenticator(iam_apikey_s2t)
s2t = SpeechToTextV1(authenticator=authenticator)
s2t.set_service_url(url_s2t)
s2t
<ibm_watson.speech_to_text_v1_adapter.SpeechToTextV1Adapter at 0x7fd9b28c9550>
!wget -O PolynomialRegressionandPipelines.mp3  https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%205/data/PolynomialRegressionandPipelines.mp3
--2021-12-14 16:08:39--  https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%205/data/PolynomialRegressionandPipelines.mp3
Resolving cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)... 169.63.118.104
Connecting to cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)|169.63.118.104|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 4234179 (4.0M) [audio/mpeg]
Saving to: ‘PolynomialRegressionandPipelines.mp3’

PolynomialRegressio 100%[===================>]   4.04M  --.-KB/s    in 0.03s   

2021-12-14 16:08:40 (128 MB/s) - ‘PolynomialRegressionandPipelines.mp3’ saved [4234179/4234179]

filename='PolynomialRegressionandPipelines.mp3'
with open(filename, mode="rb")  as wav:
    response = s2t.recognize(audio=wav, content_type='audio/mp3')
    response.result
from pandas import json_normalize

json_normalize(response.result['results'],"alternatives")
response
recognized_text=response.result['results'][0]["alternatives"][0]["transcript"]
type(recognized_text)
Language Translator

from ibm_watson import LanguageTranslatorV3
url_lt=''
apikey_lt=''
version_lt='2018-05-01'
authenticator = IAMAuthenticator(apikey_lt)
language_translator = LanguageTranslatorV3(version=version_lt,authenticator=authenticator)
language_translator.set_service_url(url_lt)
language_translator
<ibm_watson.language_translator_v3.LanguageTranslatorV3 at 0x7fd9b27abe10>
from pandas import json_normalize

json_normalize(language_translator.list_identifiable_languages().get_result(), "languages")
translation_response = language_translator.translate(\
    text=recognized_text, model_id='en-es')
translation_response
translation=translation_response.get_result()
translation
spanish_translation =translation['translations'][0]['translation']
spanish_translation
translation_new = language_translator.translate(text=spanish_translation ,model_id='es-en').get_result()
translation_eng=translation_new['translations'][0]['translation']
translation_eng
HTTP and Requests¶

import requests
import os 
from PIL import Image
from IPython.display import IFrame
url='https://www.ibm.com/'
r=requests.get(url)
r.status_code
200
print(r.request.headers)
{'User-Agent': 'python-requests/2.26.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Cookie': '_abck=CC2A0AA937A71EE423B9CB503F33530E~-1~YAAQjR/JF/qaS7h9AQAA57u/uQeR+e0SamISyAiENCDcFIBHq3I7+6IdiTZZvolM1dDtt9J/XCJxZAzqmb2t2amwnVYQCF5ij53jvF/tn5SCl/LLhyS8VKtIdjRNC2ZkuoKoCFOKS8yP3TiGc6TtejXvWOQsPVPxGJCQ+fFbj9PG0H3k1PywYKf4kXEstalTr0jR9gqa+64G0020FfiyY6G4GH+xSiMg+PYiX4/VOcsTPeQX72I9B/u8vM9GvZu+4+EgBG7ao+z/C4Qkc2+vn8Xjzbcmnq12sgEywxAhUjA+6ot21VAQnOaMcVVTH3hJbI3mgCQgNDH3g+1nCCX1E4R32lyXSLeel4bWdVbUJV11PEJUZXg=~-1~-1~-1; bm_sz=A4CD4392BBAC7A94F54B7A11B5031220~YAAQjR/JF/uaS7h9AQAA57u/uQ5cVuOkafOVxajsghBEVa+yGGFAMVvadmPKGnIms6wUE4MY/bCH0TWh/Bfash3o0qaQnbMUu1+PndoQPOx2Xik2ekWFKb4s3cGievT9OcQQrrwOoDCOSAd41+n5cZ2/IPchbsvAs4fbuaMaHGTb9s0q9oGOHW9YWwhpABDcpRhQodMQjoWg2xxCI3FXlqoZQAjCUYTa+qJGG9IVVhHdkJjmuBHOpfCb4RD08UN4TcDgcc5JNpmjystbIYs+1p84jDeK5LPvnpCAb4wpHyQ=~3224899~3424580'}
print("request body:", r.request.body)
request body: None
header=r.headers
print(r.headers)
{'Cache-Control': 'max-age=301', 'Expires': 'Mon, 13 Dec 2021 14:54:20 GMT', 'Last-Modified': 'Fri, 10 Dec 2021 16:24:06 GMT', 'ETag': '"16d86-5d2cd26e3314f"', 'Accept-Ranges': 'bytes', 'Content-Encoding': 'gzip', 'Content-Type': 'text/html', 'X-Akamai-Transformed': '9 18932 0 pmb=mTOE,1', 'Date': 'Tue, 14 Dec 2021 16:21:30 GMT', 'Content-Length': '19001', 'Connection': 'keep-alive', 'Vary': 'Accept-Encoding', 'x-content-type-options': 'nosniff', 'X-XSS-Protection': '1; mode=block', 'Content-Security-Policy': 'upgrade-insecure-requests', 'Strict-Transport-Security': 'max-age=31536000'}
header['date']
'Tue, 14 Dec 2021 16:21:30 GMT'
header['Content-Type']
'text/html'
r.encoding
'ISO-8859-1'
r.text[0:100]
'<!DOCTYPE html><html lang="en-US"><head><meta name="viewport" content="width=device-width"/><meta ch'
# Use single quotation marks for defining string
url='https://gitlab.com/ibm/skills-network/courses/placeholder101/-/raw/master/labs/module%201/images/IDSNlogo.png'
r=requests.get(url)
print(r.headers)
{'Date': 'Tue, 14 Dec 2021 16:21:53 GMT', 'Content-Type': 'image/png', 'Content-Length': '21590', 'Connection': 'keep-alive', 'Cache-Control': 'max-age=60, public', 'Content-Disposition': 'inline', 'Etag': 'W/"56d66205ba3c6cb8fd1418e601bb3ea8"', 'Permissions-Policy': 'interest-cohort=()', 'Referrer-Policy': 'strict-origin-when-cross-origin', 'X-Content-Type-Options': 'nosniff', 'X-Download-Options': 'noopen', 'X-Frame-Options': 'DENY', 'X-Permitted-Cross-Domain-Policies': 'none', 'X-Request-Id': '01FPWVH4G3SY6CTBEPFNGG4FTX', 'X-Runtime': '0.074416', 'X-Ua-Compatible': 'IE=edge', 'X-Xss-Protection': '1; mode=block', 'GitLab-LB': 'fe-19-lb-gprd', 'GitLab-SV': 'web-gke-us-east1-c', 'CF-Cache-Status': 'REVALIDATED', 'Accept-Ranges': 'bytes', 'Expect-CT': 'max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"', 'Report-To': '{"endpoints":[{"url":"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=PYRW5qzkaVBHgeht5M3WbTyOGUma00ZlqCAdViXMXTJEck7NeUOvjS47rNwnEh5VyEv%2BdZyohz7sxM%2Fa5Dnd4%2FSTtuwpIvyHJK05E3yLaOxgaOwLeTK2zvGerd8%3D"}],"group":"cf-nel","max_age":604800}', 'NEL': '{"success_fraction":0.01,"report_to":"cf-nel","max_age":604800}', 'Vary': 'Accept-Encoding', 'Strict-Transport-Security': 'max-age=31536000', 'Server': 'cloudflare', 'CF-RAY': '6bd8c492ed280637-IAD'}
r.headers['Content-Type']
'image/png'
path=os.path.join(os.getcwd(),'image.png')
path
'/content/image.png'
with open(path,'wb') as f:
    f.write(r.content)
Image.open(path)

url='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0101EN-SkillsNetwork/labs/Module%205/data/Example1.txt'
path=os.path.join(os.getcwd(),'example1.txt')
r=requests.get(url)
with open(path,'wb') as f:
    f.write(r.content)
Get Request with URL Parameters

url_get='http://httpbin.org/get'
payload={"name":"Joseph","ID":"123"}
r=requests.get(url_get,params=payload)
r.url
'http://httpbin.org/get?name=Joseph&ID=123'
print("request body:\n\n", r.request.body)
print("\n\n\n",r.status_code)
print("\n\n", r.text)
request body:

 None



 200


 {
  "args": {
    "ID": "123", 
    "name": "Joseph"
  }, 
  "headers": {
    "Accept": "*/*", 
    "Accept-Encoding": "gzip, deflate", 
    "Host": "httpbin.org", 
    "User-Agent": "python-requests/2.26.0", 
    "X-Amzn-Trace-Id": "Root=1-61b8c523-076d193706b192d243b8555f"
  }, 
  "origin": "34.86.222.88", 
  "url": "http://httpbin.org/get?name=Joseph&ID=123"
}

r.headers['Content-Type']
r.json()
r.json()['args']
{'ID': '123', 'name': 'Joseph'}
Post Requests

url_post='http://httpbin.org/post'
r_post=requests.post(url_post,data=payload)
print("POST request URL:",r_post.url )
print("GET request URL:",r.url)
POST request URL: http://httpbin.org/post
GET request URL: http://httpbin.org/get?name=Joseph&ID=123
print("POST request body:",r_post.request.body)
print("GET request body:",r.request.body)
POST request body: name=Joseph&ID=123
GET request body: None
r_post.json()['form']
{'ID': '123', 'name': 'Joseph'}
from google.colab import drive
drive.mount('/content/drive')
